/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as context from "./context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  IssueCreateInput: { // input type
    assignedUserId?: string | null; // String
    description: string; // String!
    id?: string | null; // String
    projectId: string; // String!
    status: NexusGenEnums['IssueStatus']; // IssueStatus!
    title: string; // String!
    urlKey: string; // String!
  }
  IssueUpdateInput: { // input type
    assignedUserId?: string | null; // String
    description: string; // String!
    status: NexusGenEnums['IssueStatus']; // IssueStatus!
    title: string; // String!
    urlKey: string; // String!
  }
  ProjectCreateInput: { // input type
    name: string; // String!
    urlKey: string; // String!
  }
  ProjectUpdateInput: { // input type
    name: string; // String!
    urlKey: string; // String!
  }
}

export interface NexusGenEnums {
  IssueStatus: "Backlog" | "Canceled" | "Done" | "InProgress" | "InReview" | "Todo"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenRootTypes {
  Issue: { // root type
    assignedUserId?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // String!
    projectId: string; // String!
    status: NexusGenEnums['IssueStatus']; // IssueStatus!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    urlKey: string; // String!
    userId: string; // String!
  }
  Mutation: {};
  Project: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    urlKey: string; // String!
  }
  Query: {};
  User: { // root type
    avatarUrl?: string | null; // String
    email: string; // String!
    id: string; // String!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  IssueCreateInput: NexusGenInputs['IssueCreateInput'];
  IssueUpdateInput: NexusGenInputs['IssueUpdateInput'];
  ProjectCreateInput: NexusGenInputs['ProjectCreateInput'];
  ProjectUpdateInput: NexusGenInputs['ProjectUpdateInput'];
  IssueStatus: NexusGenEnums['IssueStatus'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  Issue: { // field return type
    assignedUser: NexusGenRootTypes['User'] | null; // User
    assignedUserId: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // String!
    project: NexusGenRootTypes['Project']; // Project!
    projectId: string; // String!
    status: NexusGenEnums['IssueStatus']; // IssueStatus!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    urlKey: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Mutation: { // field return type
    createIssue: NexusGenRootTypes['Issue']; // Issue!
    createProject: NexusGenRootTypes['Project']; // Project!
    deleteIssue: NexusGenRootTypes['Issue']; // Issue!
    updateIssue: NexusGenRootTypes['Issue']; // Issue!
    updateProject: NexusGenRootTypes['Project']; // Project!
  }
  Project: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    urlKey: string; // String!
  }
  Query: { // field return type
    avaliableIssues: NexusGenRootTypes['Issue'][]; // [Issue!]!
    avaliableProjects: NexusGenRootTypes['Project'][]; // [Project!]!
    isProjectUrlKeyFree: boolean; // Boolean!
    projectByKey: NexusGenRootTypes['Project']; // Project!
  }
  User: { // field return type
    avatarUrl: string | null; // String
    email: string; // String!
    id: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Issue: { // field return type name
    assignedUser: 'User'
    assignedUserId: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'String'
    project: 'Project'
    projectId: 'String'
    status: 'IssueStatus'
    title: 'String'
    updatedAt: 'DateTime'
    urlKey: 'String'
    user: 'User'
    userId: 'String'
  }
  Mutation: { // field return type name
    createIssue: 'Issue'
    createProject: 'Project'
    deleteIssue: 'Issue'
    updateIssue: 'Issue'
    updateProject: 'Project'
  }
  Project: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    name: 'String'
    updatedAt: 'DateTime'
    urlKey: 'String'
  }
  Query: { // field return type name
    avaliableIssues: 'Issue'
    avaliableProjects: 'Project'
    isProjectUrlKeyFree: 'Boolean'
    projectByKey: 'Project'
  }
  User: { // field return type name
    avatarUrl: 'String'
    email: 'String'
    id: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createIssue: { // args
      input: NexusGenInputs['IssueCreateInput']; // IssueCreateInput!
    }
    createProject: { // args
      input: NexusGenInputs['ProjectCreateInput']; // ProjectCreateInput!
    }
    deleteIssue: { // args
      id: string; // String!
    }
    updateIssue: { // args
      id: string; // String!
      input: NexusGenInputs['IssueUpdateInput']; // IssueUpdateInput!
    }
    updateProject: { // args
      id: string; // String!
      input: NexusGenInputs['ProjectUpdateInput']; // ProjectUpdateInput!
    }
  }
  Query: {
    isProjectUrlKeyFree: { // args
      urlKey: string; // String!
    }
    projectByKey: { // args
      urlKey: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Issue" | "Mutation" | "Project" | "Query" | "User";

export type NexusGenInputNames = "IssueCreateInput" | "IssueUpdateInput" | "ProjectCreateInput" | "ProjectUpdateInput";

export type NexusGenEnumNames = "IssueStatus";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: context.GqlContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}